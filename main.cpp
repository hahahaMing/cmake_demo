//
// Created by ming on 2020/4/3.
//

#include "iostream"
#include "algorithm"
#include "vector"
#include "map"
//#include "q0151_reverseWords.hpp"
//#include "q0887_superEggDrop.hpp"
//#include "m1603_intersection.hpp"
//#include "q0355_Twitter.hpp"
//#include "q0445_addTwo.hpp"
//#include "q0542_updateMatrix.hpp"
//#include "q0056_merge.hpp"
//#include "q0055_canJump.hpp"
//#include "q0011_maxArea.hpp"
//#include "q0466_getMaxRepetitions.hpp"
//#include "q0200_numIslands.hpp"
//#include "q1248_numberOfSubarrays.hpp"
//#include "q0199_rightSideView.hpp"
//#include "m0811_waysToChange.hpp"
//#include "m5100_reversePairs.hpp"
//#include "q0046_permute.hpp"
//#include "q0023_mergeKLists.hpp"
//#include "q0033_search.hpp"
//#include "m5601_singleNumbers.hpp"
//#include "q0021_mergeTwoLists.hpp"
//#include "q0024_swapPairs.hpp"
//#include "q0025_reverseKGroup.hpp"
//#include "q1095_findInMountainArray.hpp"
//#include "q0202_isHappy.hpp"
//#include "q0053_maxSubArray.hpp"
//#include "q0045_jump.hpp"
//#include "q0098_isValidBST.hpp"
//#include "q0572_isSubtree.hpp"
//#include "q0221_maximalSquare.hpp"
//#include "q0069_mySqrt.hpp"
//#include "q0102_levelOrder.hpp"
//#include "q0560_subarraySum.hpp"
//#include "q0152_maxProduct.hpp"
//#include "q0680_validPalindrome.hpp"
//#include "q0005_longestPalindrome.hpp"
//#include "q0105_buildTree.hpp"
//#include "q0076_minWindow.hpp"
//#include "q0146_LRUCache.hpp"
//#include "q0287_findDuplicate.hpp"
//#include "q0974_subarraysDivByK.hpp"
//#include "q0084_largestRectangleAre.hpp"
//#include "q0101_isSymmetric.hpp"
//#include"q0837_new21game.hpp"
//#include "q0238_productExceptSelf.hpp"
//#include "m2900_spiralOrder.hpp"
//#include "q0990_equationsPossible.hpp"
//#include "m4600_translateNum.hpp"
//#include "q0739_dailyTemperature.hpp"
//#include "q0015_threeSum.hpp"
//#include "q0067_addBinary.hpp"
//#include "q0215_findKthLargest.hpp"
//#include "q0032_longestValidParentheses.hpp"
//#include "q0063_uniquePathsWithObstacles.hpp"
//#include "q0309_maxProfit.hpp"
//#include "q0096_numTrees.hpp"
//#include "q0095_generateTrees.hpp"
//#include "offer11_minArray.hpp"
//#include "q0064_minPathSum.hpp"
//#include "q0392_isSubsequence.hpp"
//#include "q0415_addStrings.hpp"
//#include "q0027_removeElements.hpp"
//#include "q0028_strStr.hpp"
//#include "ttttst.hpp"
//#include "q0130_solve.hpp"
//#include "q0043_multiply.hpp"
//#include "q0679_judgePoint24.hpp"
//#include "q0201_rangeBitwiseAnd.hpp"
//#include "q0459_repeatedSubstringPattern.hpp"
//#include "q0491_findSubsequences.hpp"
//#include "q0486_PredictTheWinner.hpp"
//#include "offer20_isNumber.hpp"
//#include "huawei01.hpp"
//#include "huawei02.hpp"
//#include "q0060_getPermutation.hpp"
//#include "q0107_levelOrderBottom.hpp"
//#include "q0077_combine.hpp"
//#include "q0039_combinationSum.hpp"
//#include "q0040_combinationSum2.hpp"
//#include "q0079_exist.hpp"
//#include "q0094_inorderTraversal.hpp"
//#include "q0037_solveSudoku.hpp"
//#include "q0106_buildTree.hpp"
//#include "q0145_postorderTraversal.hpp"
#include "q0701_insertIntoBST.hpp"

int main() {

//    std::cout << "hello cmake!" << std::endl;

    Solution solution;
    solution.test();
    return 0;
}